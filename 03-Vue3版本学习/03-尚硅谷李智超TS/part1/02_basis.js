// let a;
// a = 10;
// a = 'hello'
// 以前JS是这样写的
// 因为JS是动态类型的语言，变量是没有类型的概念的
// 你可以给变量赋任何类型的值
var a;
// TS写法：声明一个变量a,同时指定它的类型为number
// a的类型设置为了number，在以后的使用过程中，a的值只能是数字
a = 10;
a = 33;
// 这些都没有问题
// a = 'hello'
// 这样写会报错，出现红色的波浪线
// 但是即使TS里面有这样的错误，而且编译会报错，但是还是会编译生成JS文件！！
// 不会因为有一个错误而不让你生成JS了
// 因为首先a = 'hello';虽然不符合TS语法规范，但是它符合JS语法规范
// 其次也是为了让刚开始接触TS的人更好的接受和使用TS
// 如果我写了有错误你就不让我编译通过，那么那些习惯写JS的人就不会用TS了。
// 后面会通过编译工具的配置，让它在有错的情况下编译不通过
var b;
b = 'hello';
var c = true;
c = false;
// let d = true
// 编译器很操作，你没有写boolean,它看到赋值为true,就知道d为布尔值了
// d = 123
// 你就算没有写变量类型(声明变量时没有写boolean)
// 更改变量为123时还是会报错
// 如果变量的声明和赋值是同时进行的，那么TS就可以自动对变量进行类型检测
// 疑问：既然TS编译器可以自动判断变量类型，那我们手动写类型是否多此一举呢？
// 回答：类型给我们带来的困扰最大的往往不是变量，而是函数
// JS中的函数是不考虑参数的类型和个数的
// 这个函数很明显是求和的，那么两个参数a和b都是数字才有意义
function sum(a, b) {
    return a + b;
}
console.log(sum(123, 456));
console.log(sum(123, "456"));
